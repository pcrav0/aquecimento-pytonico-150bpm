#+title docs
#+property: header-args :results output

* introdução

** repl
#+begin_src python
  while True:
      print(eval(input()))
#+end_src

** comentários
#+begin_src python
  # comenta uma linha inteira

  """
  múltiplas
  linhas
  de
  comentário
  """
#+end_src

** básico
#+begin_src python
  # variáveis

  a = 3
  b = 5

  # chamada de função
  # <nome da função>()
  # <nome da função>(<arg1>)
  # <nome da função>(<arg1>, <arg2>, ...)

  # funções básicas

  print(a) # imprime o valor de 'a' no terminal
  dir(a) # retorna uma lista contendo todos os `atributos` do `tipo` de 'a'
  help(a) # mostro a documentação da to `tipo` de 'a'

  # chamada de método / atributos
  # <obj>.<metodo>()
  # <obj>.<metodo>(<arg1>)
  # <obj>.<metodo>(<arg1>, <arg2>, ...)

  # se dir(a) me diz que existe um atributo chamdo 'to_bytes' logo:
  print(a.to_bytes())
#+end_src

#+RESULTS:
: 3
: b'\x03'

para mais informação sobre o resto das funções básicas de python [[https://docs.python.org/3/library/functions.html][link]]

** bool
#+begin_src python :results output
  print(True)
  print(False)
#+end_src

#+RESULTS:
: True
: False

*** manipulação
#+begin_src python
  print(dir(True))
  print(not True) # negação
  print(not not True) # indenidade (juro que vai ser útil daqui a pouco)

  # pesquisar sobre: "short circuit"
  print(True and False)
  print(True or False)

  print(True == False) # igual a
  print(True != False) # diferente de
#+end_src

** números
#+begin_src python
  print(69) # inteiro
  print(13.37) # ponto flutuante
  print(34 + 35j) # complexo

  # negativo

  -69
  -13.37
  -34 + -35j

  # inf + nan
  # para mais info sobre o assunto: IEEE754 32 bits / 64 bits
  print(complex('-Infinity+NaNj'))
  print(float('Infinity'))
  print(float('-inf'))
  print(float('nan') != float('nan'))
#+end_src

#+RESULTS:
: 69
: 13.37
: (34+35j)
: (-inf+nanj)
: inf
: -inf
: True

*** manipulação
#+begin_src python
  print(3 + 2)
  print(3 - 2)
  print(3 / 2) # float
  print(3 // 2) # int (floor division)
  print(3 * 2)
  print(3 ** 2) # potencia
  print(3 % 2) # modulo

  print(3 & 2) # and
  print(3 | 2) # or
  print(3 ^ 2) # xor
  print(3 >> 2) # shift left
  print(3 << 2) # shift right

  a = 5
  a += 4 # operador + atribuição
  # o mesmo que `a = a + 2`
  print(a) # tem q ser 9
#+end_src

#+RESULTS:
#+begin_example
5
1
1.5
1
6
9
1
2
3
1
0
12
9
#+end_example

** texto
#+begin_src python
  'Lorem ipsum dolor sit amet, consectetur adipiscing elit.'
  "Aliquam porta viverra lectus eget suscipit."

  # multiplas linhas
  '''
  Duis pharetra in justo eget tempor.
  Duis ultricies tincidunt nibh, ut dictum arcu sagittis quis.
  Proin magna massa, pellentesque vel condimentum ut, volutpat id nisl.
  Ut mollis convallis augue, eget dapibus turpis faucibus vel.
  Suspendisse potenti.
  Nullam aliquet arcu et urna consequat sollicitudin.
  Cras turpis urna, sollicitudin non sapien ut, gravida malesuada magna.
  Nunc tempor condimentum augue ut volutpat.
  Curabitur laoreet placerat maximus.
  Cras massa ligula, pellentesque ut nibh a, molestie ultrices mi.
  Fusce facilisis eros nulla, id condimentum lorem aliquam nec.
  '''

  """
  Nulla vehicula tellus neque, ac varius tellus ultrices ac.
  Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.
  Curabitur ac aliquet ante, vel ultricies arcu.
  Ut eget ultrices massa.
  Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.
  Sed iaculis metus ac nunc congue, eget pretium leo imperdiet.
  Integer posuere, eros aliquet rutrum lacinia, justo ex condimentum quam, et efficitur ex nisl in elit.
  Sed lectus est, tempor vitae pellentesque eu, imperdiet non mi.
  """

  # f-string https://devdocs.io/python~3.13/reference/lexical_analysis#f-strings
  a = 5
  print(f'a + 2 = {a + 2}') # o codigo dentro de '{}' sera validado

  # acesso
  s = 'ola :)'
  #       o     l     a
  print(s[0], s[1], s[2])

  # para mais prefixos: https://devdocs.io/python~3.13/reference/lexical_analysis#string-and-bytes-literals
#+end_src

#+RESULTS:
: a + 2 = 7
: o l a

** lista
uma lista é uma forma de estruturar de dados em uma sequência ordenada,
a lista é mutável.

#+begin_src python
  print(not not []) # falsy
  print([1,2,3]) # homogêneo
  print([1, 2, 3, 'a', 'b', 'c']) # heterogêneo

  # spread
  a = [5,2,8,4,4,4,4]
  print(*a)
  print([1, *a, 0])

  # mutável

  a[0] = 6
  print(a)

  # slice

  print(a[2:4])
  # para mais prefixos: https://devdocs.io/python~3.13/reference/lexical_analysis#string-and-bytes-literals
#+end_src

** listas

a ordem dos elementos é importante

#+begin_src python
  print(not not []) # falsy
  print([1,2,3]) # homogêneo (mesmo tipo)
  print([1, 2, None]) # heterogêneo (tipos diferentes)
#+end_src

#+RESULTS:
: False
: [1, 2, 3]
: [1, 2, 3, 'a', 'b', 'c']
: 5 2 8 4 4 4 4
: [1, 5, 2, 8, 4, 4, 4, 4, 0]
: [6, 2, 8, 4, 4, 4, 4]
: [8, 4]

existem mais formas de criar listas: https://devdocs.io/python~3.13/glossary#term-list-comprehension

** tuplas
parecido com uma lista, mas imutável.

#+begin_src python
  # não exists sintaxe para uma tupla vazia

  print(('a', 'b', 'c')) # homogêneo
  print(('a', 'b', 5, 3.2)) # heterogêneo

  # spread

  '''
  os parenteses em volta da tupla é apenas para remover a ambiguidade da sintaxe
  '''
  a = 1, 2, 3, 4

  print(*a)
  print(('c', *a, 'd'))
  print(a[2])

#+end_src

#+RESULTS:
: ('a', 'b', 'c')
: ('a', 'b', 5, 3.2)
: 1 2 3 4
: ('c', 1, 2, 3, 4, 'd')
: 3

** conjuntos
parecido com uma lista, mas imutável.
todos os elementos dentro de um conjunto são únicos,
diferente de uma lista ou uma tupla os elementos não tem uma "ordem" sequencial.

** conjuntos
todos os elementos dentro de um conjunto são únicos,
a ordem em que os elementos estão não importa.

um elemento se pode fazer parte de um conjunto se ele for "único",
em python isso é representado por um elemento ter o método "__hash__"

#+begin_src python
  print(not not {}) # falsy
  print({5, 2, 6, 1}) # homogêneo
  print({5, '???', 0.2, None}) # heterogêneo
  print({5, '???', 0.2, None, *[8, 9, 10]})
  print({1,1,1,1,1}) # unico
#+end_src

#+RESULTS:
: False
: {1, 2, 5, 6}
: {0.2, None, '???', 5}
: {0.2, None, '???', 5, 8, 9, 10}
: {1}

*** TODO como fazer uma função de hash + oque é uma função de hash, para oque ela serve?
- https://en.wikipedia.org/wiki/Hash_function
- https://en.wikipedia.org/wiki/Entropy_(information_theory)
- https://en.wikipedia.org/wiki/Huffman_coding

** dicionários
um dicionário é utilizado para associar um valor a outro, associar uma "chave" a um elemento.
o funcionamento é muito parecido de uma função no em matemática ([[https://en.wikipedia.org/wiki/Function_(mathematics)][wiki]]) onde é
associado um conjunto de valores a outro conjunto

#+begin_src python
  print(not not {})
  print({
      'a': 3,
      5: [1,2,3,4],
      0.2: {
          'mais um dicionario': 'dentro de outro dicionario',
      }
  })

  # spread
  d = {
      'a': 1,
      'b': 2,
      'c': 3,
  }
  d['b'] = 69 # mutavel
  print([5, *d, 6, 7]) # apenas as 'chaves' em uma lista
  print({'z', *d, 'b', 'z'}) # apenas as 'chaves' em um conjunto
  print({'d': 4, **d}) # dentro de outro dicionário
#+end_src

#+RESULTS:
: False
: {'a': 3, 5: [1, 2, 3, 4], 0.2: {'mais um dicionario': 'dentro de outro dicionario'}}
: [5, 'a', 'b', 'c', 6, 7]
: {'c', 'a', 'b', 'z'}
: {'d': 4, 'a': 1, 'b': 69, 'c': 3}

** especial
#+begin_src python
  print(...) # Ellipsis truthy
  print(None) # falsy
  print(object())
#+end_src

#+RESULTS:
: Ellipsis
: None
: <object object at 0x7f128ed802a0>

#+end_src

** especial
#+begin_src python
  ... # Ellipsis truthy
  None # falsy
  object()
#+end_src

** conclusão dos valores
para todos os tipos diferentes de valores encontrados em python é possível
saber mais sobre eles utilizando dir(<valor>) ou help(<valor>)

** controle de fluxo
*** if
verifica se um valor é "thrufy" e executa um trecho de codigo

#+begin_src python
  if 1:
      print('verdadeiro')
  else:
      print('???')

  if []:
      print('???')
  else:
      print('falso')
#+end_src

#+RESULTS:
: verdadeiro
: falso

*** match
'if' mais esperto???

#+begin_src python
  a = False
  match (100, 200):
     case (100, 300): # falso no segundo caso
         print('a')
     case (100, 200) if a: # condições adicionais
         print('b')
     case (100, y): # se o primeiro valor da tupla for '100', então o segundo valor é atribuído a 'y'
         print(f'c {y}')
     case _:  # sem padrão, "else"
         print('d')
#+end_src

#+RESULTS:
: c 200

*** while
#+begin_src python
  a = 1
  while a < 7:
      print(a)
      a += 1
#+end_src

#+RESULTS:
: 1
: 2
: 3
: 4
: 5
: 6

**** break
#+begin_src python
  a = 1
  while a < 7:
      if a == 4:
          break
      print(a)
      a += 1
#+end_src

#+RESULTS:
: 1
: 2
: 3

**** continue
#+begin_src python
  a = 1
  while a < 7:
      a += 1
      if a % 2 == 0:
          continue
      print(a)
#+end_src

#+RESULTS:
: 3
: 5
: 7

*** for
percorre sobre todos os elementos de um [[https://devdocs.io/python~3.13/glossary#term-iterable][iterável]].
as mesmas regras de 'break' e 'continue' se aplicam aqui.

#+begin_src python
  for n in [1,2,3,4,5]:
      print(n)
#+end_src

#+RESULTS:
: 1
: 2
: 3
: 4
: 5

*** try/except/finally/raise
algumas operações em python podem resultar em um "erro".
esses erros por padram terminam a execução do programa.

#+begin_src python
  print(5 / 0)
#+end_src

mas eles podem ser "capturados".

#+begin_src python
  try:
      print(5 / 0)
  except ZeroDivisionError as e:
      print(f":< `{e}`")
#+end_src

é possível "jogar" um erro:

#+begin_src python
  raise Exception('???')
#+end_src

**** ALERTA DE OPINIÃO :O
essa é a pior forma possível de tratar erros, apenas use [[https://www.inngest.com/blog/python-errors-as-values][valores como erros]].

*** pass
não faz nada, emocionante

#+begin_src python
  if True:
      pass
#+end_src

** composição
*** def / lambda
define funções.

separar blocos de código para ser utilizado varias vezes.

#+begin_src python
  def f():
      print('aquecimento pytonico 150bpm')

  f()
  f()
  f()
#+end_src

#+RESULTS:
: aquecimento pytonico 150bpm
: aquecimento pytonico 150bpm
: aquecimento pytonico 150bpm

parametrizar partes do código.

#+begin_src python
  def parametros(a, b):
      return a * b

  print(parametros(3, 2))
  print(parametros('A', 10))
#+end_src

#+RESULTS:
: 6
: AAAAAAAAAA

#+begin_src python
  def mais_parametros(arg1, arg2, *args, **kwargs):
      print(arg1, arg2)
      print(args)
      print(kwargs)

  mais_parametros('primeiro', 'segundo',
                  1, 2, 'a', [6, 9],
                  a=1, b=2, c=4)
#+end_src

de onde vem aquele texto que aparece quando eu executo 'help' em um objeto?

#+begin_src python
  def adicionar(a, b):
      '''
      essa é a documentação da função 'adicionar' :)
      '''
      return a + b

  help(adicionar)
#+end_src

#+RESULTS:
: Help on function adicionar in module __main__:
:
: adicionar(a, b)
:     essa é a documentação da função 'adicionar' :)
:

toda função tem seu próprio 'escopo', escopo é a visibilidade de cada variável

#+begin_src python
  # 'a' é uma variavel com o escopo global, ela pode ser acessada em qualquer lugar
  a = 3

  def f():
      global a # agora posso sobre-escrever o valor de 'a'
      print(f'a = {a}')
      a = 5

  f()
  print(a)
#+end_src

#+RESULTS:
: a = 3
: 5

tente tirar a linha que contem 'global a' para entender oque esta acontecendo.

outros assuntos relacionados:
- [[https://en.wikipedia.org/wiki/Lambda_calculus][lambda calculus]]
- [[https://en.wikipedia.org/wiki/Closure_(computer_programming)][closure]]
- [[https://en.wikipedia.org/wiki/Pure_function][pure functions]]
- [[https://en.wikipedia.org/wiki/Combinatory_logic][combinators]]
- [[https://letoverlambda.com/][let over lambda]]

isso não esgota tudo oque é possível de ser feito com funções, [[https://en.wikipedia.org/wiki/Lambda_calculus][e nunca vai]].

*** class
eu não pretendo esgotar todas as possibilidades de utilização do que se pode
fazer com uma classe e/ou uma instancia de uma classe.

tudo em python que tem um 'valor' é um objeto, números, listas, funções, etc...
com uma classe é possível criar nosso próprio objeto customizado.

#+begin_src python
  class Player:
      """
      documentação do player
      """
      def __init__(self, x, y, healt):
          self.x = x
          self.y = y
          self.healt = healt

      def jump(self):
          self.y += 50

  p1 = Player(10, 15, 100)

  print(dir(p1))
  print(help(p1))

  print(p1.y)
  p1.jump()
  print(p1.y)
#+end_src

#+RESULTS:
#+begin_example
['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__firstlineno__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__static_attributes__', '__str__', '__subclasshook__', '__weakref__', 'healt', 'jump', 'x', 'y']
Help on Player in module __main__ object:

class Player(builtins.object)
 |  Player(x, y, healt)
 |
 |  documentação do player
 |
 |  Methods defined here:
 |
 |  __init__(self, x, y, healt)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |
 |  jump(self)
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |
 |  __dict__
 |      dictionary for instance variables
 |
 |  __weakref__
 |      list of weak references to the object

None
15
65
#+end_example

os métodos definidos com 2 __ no começo e no fim são métodos especiais
eles são chamados de "dunder methods" e aqui esta uma lista de todos os métodos
possíveis e oque eles fazem [[https://devdocs.io/python~3.13/reference/datamodel#basic-customization][link]]

classes também podem herdar comportamentos (métodos) e propriedades de outras classes
em um processo chamado 'herança'.


**AVISO** isso é apenas para intuito educacional, não utilize herança em seu código.
não sem entender muito bem oque você esta fazendo, tenho certeza que existe uma solução
mais simples para qualquer problema que você esta tentando solucionar.

esse é o exemplo mais clássico de herança possível
#+begin_src python
  class Animal:
      def __init__(self, nome):
          self.nome = nome
          self.fome = 0
          self.vida = 100

      def com_fome(self):
          return self.fome > 30

      def alimentar(self, calorias):
          self.fome -= calorias
          if self.fome < 0:
              self.fome = 0

  class Gato(Animal):
      '''
      Gato de Animal herda as propriedades 'nome', 'fome'
      e herda os métodos 'com_fome'
      '''
      def __init__(self, nome, cor):
          super().__init__(nome) # se refere ao parente 'Animal'
          self.cor = cor
          self.vida *= 7


  chico = Gato('chico', 'preto')
  print(chico.vida)
  print(chico.com_fome())
  chico.fome = 50
  print(chico.com_fome())
  chico.alimentar(30)
  print(chico.com_fome())
#+end_src

#+RESULTS:
: 700
: False
: True
: False

prefira composição em vez de herança
#+begin_src python
  from datetime import datetime


  class Pessoa:
      def __init__(self, nome, nascimento):
          self.nome = nome
          self.nascimento = nascimento

      def __str__(self):
          s = ''
          if self.nascimento:
              s = ' ' + self.nascimento.strftime("%d/%m/%y")
          return f'{self.nome}{s}'

  class Programador:
      def __init__(self, nome, nascimento, intereses, portfolio):
          self.pessoa = Pessoa(nome, nascimento)
          self.intereses = intereses
          self.portfolio = portfolio

      def __str__(self):
          return f'{self.pessoa} - {self.portfolio}'

  l = [
      Programador(
          'Dave Ackley',
          None,
          ['artificial life', 'indefinite scalability',
           'robust first computing', 'best-effort computing',
           'computer security',
           'https://en.wikipedia.org/wiki/Ackley_function'],
          'https://github.com/daveackley/'),
      Programador(
          'Ada Lovelace',
          datetime(1852, 11, 27),
          ['Analytical Engine', 'mathematics', 'logic'],
          'https://en.wikipedia.org/wiki/Ada_Lovelace',
      ),
      Programador(
          'Edsger Wybe Dijkstra',
          datetime(1930, 5, 11),
          ['lang dev', 'shortest path', 'goto'],
          'https://en.wikipedia.org/wiki/Edsger_W._Dijkstra',
      ),
      Programador(
          'Terrence Andrew Davis',
          datetime(2018, 12, 15),
          ['lang dev', 'os dev', 'game dev',
           'catholic', 'cia', 'schizophrenia'],
          'https://templeos.org/',
      ),
      Programador(
          'Jonathan Blow',
          datetime(1971, 1, 1),
          ['lang dev', 'game dev', 'tai chi'],
          'http://number-none.com/blow/',
      ),
      Programador(
          'Sean Barrett',
          None,
          ['music', 'game dev', 'image processing'],
          'https://nothings.org/',
      ),
      Programador(
          'Richard Matthew Stallman',
          datetime(1953, 5, 16),
          ['foss', 'gnu', 'emacs', 'lisp', 'os dev', 'activism'],
          'https://stallman.org/',
      ),
  ]

  for p in l:
      print(p) # composição dos metodos __str__
#+end_src

#+RESULTS:
: Dave Ackley - https://github.com/daveackley/
: Ada Lovelace 27/11/52 - https://en.wikipedia.org/wiki/Ada_Lovelace
: Edsger Wybe Dijkstra 11/05/30 - https://en.wikipedia.org/wiki/Edsger_W._Dijkstra
: Terrence Andrew Davis 15/12/18 - https://templeos.org/
: Jonathan Blow 01/01/71 - http://number-none.com/blow/
: Sean Barrett - https://nothings.org/
: Richard Matthew Stallman 16/05/53 - https://stallman.org/

ah... [[https://en.wikipedia.org/wiki/Object-oriented_programming][OOP]], [[https://www.youtube.com/watch?v=QM1iUe6IofM][como te explicar]]?
*** match
*** while
**** break
**** continue
*** for

** composição
*** def
*** class

** meta
- https://docs.python.org/3/glossary.html#term-decorator
- https://docs.python.org/3/tutorial/classes.html#inheritance
- https://docs.python.org/3/library/dis.html#module-dis

* 2° passo
- git
- gerenciamento de dependencias (nix, python venv)

* ferramentas
- [[https://mypy.readthedocs.io/en/stable/getting_started.html][mypy - static analizer]]
- [[https://docs.python.org/3/library/pdb.html][pdb - python debugger]]
- [[https://docs.basedpyright.com/latest/][basedpyright - python lsp]]

* métodos
- [[https://en.wikipedia.org/wiki/Rubber_duck_debugging][Rubber duck debugging]]

* vídeos
- [[https://www.youtube.com/watch?v=2qV-1JhxWeE][vm]]

* ?
- [[https://en.wikipedia.org/wiki/Conway's_Game_of_Life][gol]]
- https://wiki.python.org/moin/BeginnersGuide
- https://en.wikipedia.org/wiki/Approximate_string_matching
- https://en.wikipedia.org/wiki/Brainfuck
  https://www.brainfuck.org/
- https://docs.python.org/3/library/struct.html
- https://en.wikipedia.org/wiki/Just-in-time_compilation

* parsing
- https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form

** recursive desendent
- https://www.youtube.com/watch?v=MnctEW1oL-E
- https://en.wikipedia.org/wiki/Recursive_descent_parser

* meta
- https://inv.nadeko.net/watch?v=yWzMiaqnpkI&listen=false
- https://inv.nadeko.net/watch?__goaway_challenge=meta-refresh&__goaway_id=4865d7869d7342ccff19b50600a5ee3a&__goaway_referer=https%3A%2F%2Finv.nadeko.net%2Fwatch%3Fv%3DgZjcsrjBIVs&listen=false&v=sPiWg5jSoZI

* web
#+begin_src shell
  flask --app web run --debug
#+end_src

- https://www.youtube.com/watch?v=bMUQkhi1V84
- https://flask.palletsprojects.com/en/stable/
- https://docs.python.org/3/library/sqlite3.html

* kata
https://www.codewars.com/
